import streamlit as st
import pandas as pd
import numpy as np
from google import genai
from google.genai.errors import APIError
from google.genai import types
import json
from scipy import optimize
import math

# --- C·∫•u h√¨nh Trang Streamlit ---
st.set_page_config(
    page_title="App ƒê√°nh gi√° Hi·ªáu qu·∫£ D·ª± √°n Kinh doanh (NPV, IRR, PP)",
    layout="wide"
)

st.title("·ª®ng d·ª•ng ƒê√°nh gi√° Hi·ªáu qu·∫£ D·ª± √°n Kinh doanh üìà")
st.markdown("S·ª≠ d·ª•ng AI ƒë·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ vƒÉn b·∫£n v√† t√≠nh to√°n c√°c ch·ªâ s·ªë NPV, IRR, PP, DPP.")

# L·∫•y API Key t·ª´ Streamlit Secrets
api_key = st.secrets.get("GEMINI_API_KEY")
if not api_key:
    st.warning("C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y Kh√≥a 'GEMINI_API_KEY'. Vui l√≤ng c·∫•u h√¨nh trong Streamlit Secrets ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng AI.")

# Kh·ªüi t·∫°o Session State
if "data_extracted" not in st.session_state:
    st.session_state.data_extracted = None
if "metrics_calculated" not in st.session_state:
    st.session_state.metrics_calculated = None
if "cashflow_df" not in st.session_state:
    st.session_state.cashflow_df = None

# --- Khung JSON Schema cho vi·ªác L·ªçc D·ªØ li·ªáu (Y√äU C·∫¶U 1) ---
EXTRACTION_SCHEMA = types.Schema(
    type=types.Type.OBJECT,
    properties={
        "investment_capital_vnd": types.Schema(
            type=types.Type.NUMBER,
            description="T·ªïng v·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu c·ªßa d·ª± √°n, ph·∫£i l√† gi√° tr·ªã s·ªë nguy√™n l·ªõn (V√≠ d·ª•: 30000000000, KH√îNG D√ôNG ƒë∆°n v·ªã t·ª∑)."
        ),
        "project_life_years": types.Schema(
            type=types.Type.INTEGER,
            description="V√≤ng ƒë·ªùi d·ª± √°n theo nƒÉm, ph·∫£i l√† s·ªë nguy√™n."
        ),
        "annual_revenue_vnd": types.Schema(
            type=types.Type.NUMBER,
            description="Doanh thu h√†ng nƒÉm, ph·∫£i l√† gi√° tr·ªã s·ªë nguy√™n l·ªõn."
        ),
        "annual_cost_vnd": types.Schema(
            type=types.Type.NUMBER,
            description="T·ªïng chi ph√≠ ho·∫°t ƒë·ªông h√†ng nƒÉm, ph·∫£i l√† gi√° tr·ªã s·ªë nguy√™n l·ªõn."
        ),
        "wacc_rate": types.Schema(
            type=types.Type.NUMBER,
            description="Chi ph√≠ v·ªën b√¨nh qu√¢n (WACC) d∆∞·ªõi d·∫°ng t·ª∑ l·ªá th·∫≠p ph√¢n (V√≠ d·ª•: 0.13 cho 13%)."
        ),
        "tax_rate": types.Schema(
            type=types.Type.NUMBER,
            description="Thu·∫ø su·∫•t thu nh·∫≠p doanh nghi·ªáp d∆∞·ªõi d·∫°ng t·ª∑ l·ªá th·∫≠p ph√¢n (V√≠ d·ª•: 0.20 cho 20%)."
        ),
    },
    required=[
        "investment_capital_vnd", "project_life_years", "annual_revenue_vnd", 
        "annual_cost_vnd", "wacc_rate", "tax_rate"
    ]
)

# --- H√†m g·ªçi API Gemini ƒë·ªÉ L·ªçc D·ªØ li·ªáu (Y√äU C·∫¶U 1) ---
def extract_project_info(project_text, api_key):
    """S·ª≠ d·ª•ng Gemini ƒë·ªÉ tr√≠ch xu·∫•t c√°c th√¥ng s·ªë t√†i ch√≠nh t·ª´ vƒÉn b·∫£n."""
    if not api_key:
        st.error("L·ªói: Kh√¥ng c√≥ Kh√≥a API.")
        return None

    try:
        client = genai.Client(api_key=api_key)
        
        prompt = f"""
        B·∫°n l√† m·ªôt tr·ª£ l√Ω ph√¢n t√≠ch t√†i ch√≠nh. Nhi·ªám v·ª• c·ªßa b·∫°n l√† ƒë·ªçc b·∫£n t√≥m t·∫Øt d·ª± √°n kinh doanh sau v√† tr√≠ch xu·∫•t s√°u th√¥ng s·ªë t√†i ch√≠nh quan tr·ªçng. 
        V·ªën ƒë·∫ßu t∆∞, Doanh thu, v√† Chi ph√≠ ph·∫£i ƒë∆∞·ª£c tr√≠ch xu·∫•t th√†nh **gi√° tr·ªã s·ªë nguy√™n l·ªõn (VND)**, kh√¥ng d√πng ƒë∆°n v·ªã 't·ª∑' hay 'tri·ªáu'.
        WACC v√† Thu·∫ø ph·∫£i ƒë∆∞·ª£c tr√≠ch xu·∫•t th√†nh **t·ª∑ l·ªá th·∫≠p ph√¢n** (v√≠ d·ª•: 0.13, 0.20).

        N·ªôi dung d·ª± √°n:
        ---
        {project_text}
        ---
        """

        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=prompt,
            config=types.GenerateContentConfig(
                response_mime_type="application/json",
                response_schema=EXTRACTION_SCHEMA,
            )
        )
        
        # Parse chu·ªói JSON th√†nh dictionary
        data = json.loads(response.text)
        return data

    except APIError as e:
        st.error(f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}")
        return None
    except json.JSONDecodeError:
        st.error("L·ªói: AI tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng JSON kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i v·ªõi n·ªôi dung r√µ r√†ng h∆°n.")
        st.code(response.text)
        return None
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh tr√≠ch xu·∫•t: {e}")
        return None

# --- H√†m t√≠nh to√°n Ch·ªâ s·ªë T√†i ch√≠nh (Y√äU C·∫¶U 3) ---
def calculate_financial_metrics(params):
    """T√≠nh to√°n NCF, NPV, IRR, PP, v√† DPP."""
    V0 = params['investment_capital_vnd']
    T = params['project_life_years']
    DT = params['annual_revenue_vnd']
    CP = params['annual_cost_vnd']
    WACC = params['wacc_rate']
    TAX = params['tax_rate']

    # 1. T√≠nh D√≤ng ti·ªÅn Thu·∫ßn H√†ng nƒÉm (NCF)
    EBT = DT - CP
    Tax_Payment = EBT * TAX if EBT > 0 else 0
    NCF_Annual = EBT - Tax_Payment
    
    # Gi·∫£ ƒë·ªãnh: D√≤ng ti·ªÅn ch·ªâ b·∫Øt ƒë·∫ßu t·ª´ cu·ªëi nƒÉm 1
    cash_flows = [-V0] + [NCF_Annual] * T

    # 2. X√¢y d·ª±ng B·∫£ng D√≤ng ti·ªÅn (Y√äU C·∫¶U 2)
    cashflow_data = {
        'NƒÉm': list(range(T + 1)),
        'V·ªën ƒê·∫ßu t∆∞ (CF0)': [V0] + [0] * T,
        'D√≤ng ti·ªÅn Thu·∫ßn (NCF)': cash_flows,
        'D√≤ng ti·ªÅn Chi·∫øt kh·∫•u': [0] * (T + 1),
        'D∆∞ n·ª£ Chi·∫øt kh·∫•u': [0] * (T + 1)
    }
    df = pd.DataFrame(cashflow_data)

    # 3. T√≠nh NPV (Net Present Value)
    # np.npv(rate, values) - L∆∞u √Ω: V0 ph·∫£i l√† ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n c·ªßa values
    NPV = np.npv(WACC, cash_flows)
    
    # 4. T√≠nh IRR (Internal Rate of Return)
    try:
        IRR = np.irr(cash_flows)
    except ValueError:
        IRR = np.nan # Kh√¥ng th·ªÉ t√≠nh n·∫øu d√≤ng ti·ªÅn kh√¥ng ƒë·ªïi d·∫•u

    # 5. T√≠nh PP (Payback Period - Th·ªùi gian Ho√†n v·ªën)
    # Gi·∫£ ƒë·ªãnh d√≤ng ti·ªÅn ƒë·ªÅu h√†ng nƒÉm
    PP = V0 / NCF_Annual if NCF_Annual > 0 else float('inf')

    # 6. T√≠nh DPP (Discounted Payback Period - Th·ªùi gian Ho√†n v·ªën c√≥ Chi·∫øt kh·∫•u)
    
    # T√≠nh d√≤ng ti·ªÅn chi·∫øt kh·∫•u
    for t in range(T + 1):
        if t == 0:
            df.loc[t, 'D√≤ng ti·ªÅn Chi·∫øt kh·∫•u'] = -V0
        else:
            discounted_cf = NCF_Annual / ((1 + WACC) ** t)
            df.loc[t, 'D√≤ng ti·ªÅn Chi·∫øt kh·∫•u'] = discounted_cf
    
    # T√≠nh d∆∞ n·ª£ chi·∫øt kh·∫•u (Cumulative Discounted Cash Flow)
    cumulative_dcf = 0
    for t in range(T + 1):
        cumulative_dcf += df.loc[t, 'D√≤ng ti·ªÅn Chi·∫øt kh·∫•u']
        df.loc[t, 'D∆∞ n·ª£ Chi·∫øt kh·∫•u'] = cumulative_dcf

    # T√≠nh DPP
    DPP = float('inf')
    if df['D∆∞ n·ª£ Chi·∫øt kh·∫•u'].max() > 0:
        # T√¨m nƒÉm ƒë·∫ßu ti√™n d∆∞ n·ª£ > 0
        payback_year = df[df['D∆∞ n·ª£ Chi·∫øt kh·∫•u'] >= 0].index.min()
        
        if payback_year is not np.nan and payback_year > 0:
            # Gi√° tr·ªã √¢m cu·ªëi c√πng tr∆∞·ªõc khi ho√†n v·ªën
            prev_cumulative = df.loc[payback_year - 1, 'D∆∞ n·ª£ Chi·∫øt kh·∫•u']
            # D√≤ng ti·ªÅn chi·∫øt kh·∫•u nƒÉm ho√†n v·ªën
            dcf_payback_year = df.loc[payback_year, 'D√≤ng ti·ªÅn Chi·∫øt kh·∫•u']
            
            # T√≠nh ph·∫ßn l·∫ª: |Gi√° tr·ªã √¢m cu·ªëi c√πng| / D√≤ng ti·ªÅn chi·∫øt kh·∫•u nƒÉm ƒë√≥
            fractional_year = -prev_cumulative / dcf_payback_year
            DPP = (payback_year - 1) + fractional_year
    
    # Chu·∫©n b·ªã k·∫øt qu·∫£
    metrics = {
        "V0": V0, "T": T, "DT": DT, "CP": CP, "WACC": WACC, "TAX": TAX,
        "NCF_Annual": NCF_Annual,
        "NPV": NPV,
        "IRR": IRR,
        "PP": PP,
        "DPP": DPP
    }

    return metrics, df

# --- H√†m g·ªçi AI ƒë·ªÉ Ph√¢n t√≠ch Ch·ªâ s·ªë (Y√äU C·∫¶U 4) ---
def get_ai_analysis_report(metrics, api_key):
    """G·ª≠i c√°c ch·ªâ s·ªë ƒë√£ t√≠nh to√°n ƒë·∫øn Gemini ƒë·ªÉ nh·∫≠n ph√¢n t√≠ch chuy√™n s√¢u."""
    if not api_key:
        return "L·ªói: Kh√¥ng c√≥ Kh√≥a API."
        
    try:
        client = genai.Client(api_key=api_key)
        model_name = 'gemini-2.5-flash'
        
        # ƒê·ªãnh d·∫°ng d·ªØ li·ªáu ƒë·ªÉ AI d·ªÖ d√†ng x·ª≠ l√Ω
        metrics_text = (
            f"- V·ªën ƒê·∫ßu t∆∞ (V0): {metrics['V0']:,.0f} VND\n"
            f"- V√≤ng ƒë·ªùi D·ª± √°n (T): {metrics['T']} nƒÉm\n"
            f"- Chi ph√≠ V·ªën (WACC): {metrics['WACC']:.2%}\n"
            f"- D√≤ng ti·ªÅn Thu·∫ßn H√†ng nƒÉm (NCF): {metrics['NCF_Annual']:,.0f} VND\n"
            f"--- K·∫æT QU·∫¢ ƒê√ÅNH GI√Å HI·ªÜU QU·∫¢ ---\n"
            f"1. **Gi√° tr·ªã Hi·ªán t·∫°i Thu·∫ßn (NPV):** {metrics['NPV']:,.0f} VND\n"
            f"2. **T·ª∑ su·∫•t Ho√†n v·ªën N·ªôi b·ªô (IRR):** {metrics['IRR']:.2%} (N·∫øu IRR h·ª£p l·ªá)\n"
            f"3. **Th·ªùi gian Ho√†n v·ªën (PP):** {metrics['PP']:.2f} nƒÉm\n"
            f"4. **Th·ªùi gian Ho√†n v·ªën c√≥ Chi·∫øt kh·∫•u (DPP):** {metrics['DPP']:.2f} nƒÉm\n"
        )
        
        prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia l·∫≠p d·ª± √°n kinh doanh. D·ª±a tr√™n c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ d·ª± √°n sau, h√£y ƒë∆∞a ra m·ªôt **b√°o c√°o ph√¢n t√≠ch ng·∫Øn g·ªçn, chuy√™n nghi·ªáp** (kho·∫£ng 3-4 ƒëo·∫°n). 
        
        Trong b√°o c√°o, b·∫°n c·∫ßn:
        1. **ƒê√°nh gi√° NPV:** NPV l√† d∆∞∆°ng hay √¢m? √ù nghƒ©a.
        2. **ƒê√°nh gi√° IRR:** So s√°nh IRR v·ªõi WACC ({metrics['WACC']:.2%}). D·ª± √°n c√≥ ch·∫•p nh·∫≠n ƒë∆∞·ª£c kh√¥ng?
        3. **ƒê√°nh gi√° Th·ªùi gian Ho√†n v·ªën (PP/DPP):** Th·ªùi gian ho√†n v·ªën c√≥ n·∫±m trong v√≤ng ƒë·ªùi d·ª± √°n ({metrics['T']} nƒÉm) kh√¥ng? R·ªßi ro thanh kho·∫£n.

        ƒê√¢y l√† c√°c ch·ªâ s·ªë chi ti·∫øt:
        {metrics_text}
        """

        system_instruction_analysis = (
            "B·∫°n l√† chuy√™n gia l·∫≠p d·ª± √°n kinh doanh, ph√¢n t√≠ch c√°c ch·ªâ s·ªë t√†i ch√≠nh (NPV, IRR, PP, DPP) m·ªôt c√°ch kh√°ch quan v√† chuy√™n nghi·ªáp. "
            "S·ª≠ d·ª•ng ng√¥n ng·ªØ r√µ r√†ng, ƒë∆∞a ra k·∫øt lu·∫≠n v·ªÅ t√≠nh kh·∫£ thi c·ªßa d·ª± √°n."
        )

        response = client.models.generate_content(
            model=model_name,
            contents=prompt,
            config=types.GenerateContentConfig(
                system_instruction=system_instruction_analysis
            )
        )
        return response.text
        
    except APIError as e:
        return f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}"
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh ph√¢n t√≠ch: {e}"


# --- Giao di·ªán ng∆∞·ªùi d√πng ---
col1, col2 = st.columns([1, 2])

with col1:
    st.subheader("1. Nh·∫≠p li·ªáu Ph∆∞∆°ng √°n Kinh doanh")
    
    # Input cho n·ªôi dung Word file
    project_text_input = st.text_area(
        "D√°n n·ªôi dung Ph∆∞∆°ng √°n Kinh doanh (t·ª´ file Word) v√†o ƒë√¢y:",
        height=350,
        value="""
        D·ª± √°n ƒê·∫ßu t∆∞ D√¢y chuy·ªÅn S·∫£n xu·∫•t B√°nh m√¨.
        V·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu l√† 30 t·ª∑.
        D·ª± √°n c√≥ v√≤ng ƒë·ªùi 10 nƒÉm.
        M·ªói nƒÉm t·∫°o ra 3,5 t·ª∑ ƒë·ªìng doanh thu, chi ph√≠ m·ªói nƒÉm l√† 2 t·ª∑ ƒë·ªìng.
        Thu·∫ø su·∫•t thu nh·∫≠p doanh nghi·ªáp l√† 20%.
        WACC c·ªßa doanh nghi·ªáp l√† 13%.
        """
    )

    # N√∫t b·∫•m ƒë·ªÉ th·ª±c hi·ªán thao t√°c l·ªçc d·ªØ li·ªáu
    if st.button("‚ú® L·ªçc D·ªØ li·ªáu v√† B·∫Øt ƒë·∫ßu T√≠nh to√°n"):
        if api_key and project_text_input:
            with st.spinner('ƒêang g·ª≠i vƒÉn b·∫£n v√† ch·ªù AI tr√≠ch xu·∫•t d·ªØ li·ªáu...'):
                extracted_data = extract_project_info(project_text_input, api_key)
                
            if extracted_data:
                st.session_state.data_extracted = extracted_data
                
                # Th·ª±c hi·ªán t√≠nh to√°n ngay sau khi tr√≠ch xu·∫•t th√†nh c√¥ng
                try:
                    metrics, df_cashflow = calculate_financial_metrics(extracted_data)
                    st.session_state.metrics_calculated = metrics
                    st.session_state.cashflow_df = df_cashflow
                    st.success("Tr√≠ch xu·∫•t v√† T√≠nh to√°n th√†nh c√¥ng!")
                except Exception as e:
                    st.error(f"L·ªói t√≠nh to√°n: {e}")
                    st.session_state.metrics_calculated = None
                    st.session_state.cashflow_df = None
            else:
                st.error("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra n·ªôi dung ƒë·∫ßu v√†o.")
                st.session_state.data_extracted = None
                st.session_state.metrics_calculated = None
                st.session_state.cashflow_df = None
        elif not api_key:
            st.error("Vui l√≤ng c·∫•u h√¨nh Kh√≥a API Gemini.")
        else:
            st.warning("Vui l√≤ng nh·∫≠p n·ªôi dung d·ª± √°n.")

with col2:
    if st.session_state.data_extracted:
        st.subheader("2. D·ªØ li·ªáu D·ª± √°n ƒê√£ L·ªçc (AI)")
        
        # Hi·ªÉn th·ªã d·ªØ li·ªáu ƒë√£ l·ªçc
        data = st.session_state.data_extracted
        
        st.markdown(f"""
        | Ch·ªâ ti√™u | Gi√° tr·ªã |
        | :--- | :--- |
        | **V·ªën ƒê·∫ßu t∆∞ (V0)** | {data['investment_capital_vnd']:,.0f} VND |
        | **V√≤ng ƒë·ªùi D·ª± √°n** | {data['project_life_years']} nƒÉm |
        | **Doanh thu H√†ng nƒÉm** | {data['annual_revenue_vnd']:,.0f} VND |
        | **Chi ph√≠ H√†ng nƒÉm** | {data['annual_cost_vnd']:,.0f} VND |
        | **WACC (Chi·∫øt kh·∫•u)** | {data['wacc_rate']:.2%} |
        | **Thu·∫ø su·∫•t TNDN** | {data['tax_rate']:.0%} |
        """)
        
        # T√≠nh to√°n NCF h√†ng nƒÉm
        st.info(f"**D√≤ng ti·ªÅn Thu·∫ßn H√†ng nƒÉm (NCF)** = (Doanh thu - Chi ph√≠) * (1 - Thu·∫ø) = **{st.session_state.metrics_calculated['NCF_Annual']:,.0f} VND**")

# --- B·∫£ng D√≤ng ti·ªÅn (Y√äU C·∫¶U 2) ---
if st.session_state.cashflow_df is not None:
    st.markdown("---")
    st.subheader("3. B·∫£ng D√≤ng ti·ªÅn v√† Ho√†n v·ªën Chi·∫øt kh·∫•u (Y√™u c·∫ßu 2)")
    
    st.dataframe(
        st.session_state.cashflow_df.style.format({
            'V·ªën ƒê·∫ßu t∆∞ (CF0)': '{:,.0f}',
            'D√≤ng ti·ªÅn Thu·∫ßn (NCF)': '{:,.0f}',
            'D√≤ng ti·ªÅn Chi·∫øt kh·∫•u': '{:,.0f}',
            'D∆∞ n·ª£ Chi·∫øt kh·∫•u': '{:,.0f}'
        }),
        use_container_width=True,
        hide_index=True
    )

# --- Ch·ªâ s·ªë ƒê√°nh gi√° Hi·ªáu qu·∫£ (Y√äU C·∫¶U 3) ---
if st.session_state.metrics_calculated:
    st.markdown("---")
    st.subheader("4. C√°c Ch·ªâ s·ªë ƒê√°nh gi√° Hi·ªáu qu·∫£ D·ª± √°n (Y√™u c·∫ßu 3)")
    metrics = st.session_state.metrics_calculated
    
    col_npv, col_irr, col_pp, col_dpp = st.columns(4)
    
    with col_npv:
        st.metric(
            label="Gi√° tr·ªã Hi·ªán t·∫°i Thu·∫ßn (NPV)",
            value=f"{metrics['NPV']:,.0f} VND",
            delta="Ch·∫•p nh·∫≠n" if metrics['NPV'] > 0 else "T·ª´ ch·ªëi"
        )
    with col_irr:
        # Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa IRR
        irr_value = f"{metrics['IRR']:.2%}" if not np.isnan(metrics['IRR']) else "N/A"
        irr_delta = None
        if not np.isnan(metrics['IRR']):
            irr_delta = "Ch·∫•p nh·∫≠n" if metrics['IRR'] > metrics['WACC'] else "T·ª´ ch·ªëi"
            
        st.metric(
            label="T·ª∑ su·∫•t Ho√†n v·ªën N·ªôi b·ªô (IRR)",
            value=irr_value,
            delta=irr_delta
        )
    with col_pp:
        st.metric(
            label="Th·ªùi gian Ho√†n v·ªën (PP)",
            value=f"{metrics['PP']:.2f} nƒÉm"
        )
    with col_dpp:
        st.metric(
            label="Th·ªùi gian Ho√†n v·ªën c√≥ Chi·∫øt kh·∫•u (DPP)",
            value=f"{metrics['DPP']:.2f} nƒÉm"
        )

    # --- Ph√¢n t√≠ch AI (Y√äU C·∫¶U 4) ---
    st.markdown("---")
    st.subheader("5. Ph√¢n t√≠ch Chuy√™n s√¢u t·ª´ AI (Y√™u c·∫ßu 4)")
    
    if st.button("Y√™u c·∫ßu AI Ph√¢n t√≠ch Hi·ªáu qu·∫£"):
        if api_key:
            with st.spinner("ƒêang g·ª≠i ch·ªâ s·ªë v√† ch·ªù Gemini ph√¢n t√≠ch..."):
                analysis_report = get_ai_analysis_report(metrics, api_key)
            
            st.markdown(analysis_report)
        else:
            st.error("Vui l√≤ng c·∫•u h√¨nh Kh√≥a API Gemini ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y.")

# Footer
st.markdown("---")
st.caption("·ª®ng d·ª•ng ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi Gemini d·ª±a tr√™n Streamlit v√† Gemini API ƒë·ªÉ ph√¢n t√≠ch d·ª± √°n kinh doanh.")
